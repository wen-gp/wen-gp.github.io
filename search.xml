<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C#原生Excel操作</title>
    <url>/2023/09/11/C-%E5%8E%9F%E7%94%9FExcel%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<p>首先要引入Microsoft.Office.Interop.Excel.dll<br>引入后，下面是代码示例</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.Office.Interop.Excel;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp3</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ExcelGenerator</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Test</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">string</span> TableName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">string</span> ColumnName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">string</span> AssociatedTableName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">string</span> AssociatedColumnName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">string</span> Remarks &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">TryCreateExcel</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Application app = <span class="literal">default</span>;</span><br><span class="line">            Workbook wb = <span class="literal">default</span>;</span><br><span class="line">            Worksheet ws = <span class="literal">default</span>;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//初始化</span></span><br><span class="line">                app = <span class="keyword">new</span> Application();</span><br><span class="line">                <span class="keyword">if</span> (app == <span class="literal">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                wb = app.Workbooks.Add(<span class="literal">true</span>);</span><br><span class="line">                ws = (Worksheet)wb.Sheets.get_Item(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//获取数据</span></span><br><span class="line">                <span class="built_in">bool</span> isSuccess = TryGetExcel(<span class="keyword">out</span> List&lt;Test&gt; datas);</span><br><span class="line">                <span class="keyword">if</span>(!isSuccess)</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//生成头部</span></span><br><span class="line">                ws.Cells[<span class="number">1</span>, <span class="number">1</span>] = <span class="string">&quot;表格名称&quot;</span>;</span><br><span class="line">                ws.Cells[<span class="number">1</span>, <span class="number">2</span>] = <span class="string">&quot;列名称&quot;</span>;</span><br><span class="line">                ws.Cells[<span class="number">1</span>, <span class="number">3</span>] = <span class="string">&quot;关联表格名称&quot;</span>;</span><br><span class="line">                ws.Cells[<span class="number">1</span>, <span class="number">4</span>] = <span class="string">&quot;关联列名称&quot;</span>;</span><br><span class="line">                ws.Cells[<span class="number">1</span>, <span class="number">5</span>] = <span class="string">&quot;备注&quot;</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//生成数据</span></span><br><span class="line">                <span class="built_in">int</span> rowIndex = <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">foreach</span> (<span class="keyword">var</span> data <span class="keyword">in</span> datas)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="built_in">int</span> columnIndex = <span class="number">1</span>; columnIndex &lt;= <span class="number">5</span>; columnIndex++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">switch</span> (columnIndex)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">case</span> <span class="number">1</span>: ws.Cells[rowIndex, columnIndex] = data.TableName; <span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">case</span> <span class="number">2</span>: ws.Cells[rowIndex, columnIndex] = data.ColumnName; <span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">case</span> <span class="number">3</span>: ws.Cells[rowIndex, columnIndex] = data.AssociatedTableName; <span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">case</span> <span class="number">4</span>: ws.Cells[rowIndex, columnIndex] = data.AssociatedColumnName; <span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                                &#123;</span><br><span class="line">                                    <span class="keyword">switch</span> (data.ColumnName)</span><br><span class="line">                                    &#123;</span><br><span class="line">                                        <span class="keyword">case</span> <span class="string">&quot;GGQAAG&quot;</span>: ws.Cells[rowIndex, columnIndex] = <span class="string">&quot;工程项目编号&quot;</span>; <span class="keyword">break</span>;</span><br><span class="line">                                        <span class="keyword">case</span> <span class="string">&quot;PKE&quot;</span>: ws.Cells[rowIndex, columnIndex] = <span class="string">&quot;勘察阶段&quot;</span>; <span class="keyword">break</span>;</span><br><span class="line">                                        <span class="keyword">case</span> <span class="string">&quot;GCJBMC&quot;</span>: ws.Cells[rowIndex, columnIndex] = <span class="string">&quot;工程区名称&quot;</span>; <span class="keyword">break</span>;</span><br><span class="line">                                        <span class="keyword">case</span> <span class="string">&quot;GCJCBN&quot;</span>: ws.Cells[rowIndex, columnIndex] = <span class="string">&quot;边坡编号&quot;</span>; <span class="keyword">break</span>;</span><br><span class="line">                                        <span class="keyword">case</span> <span class="string">&quot;MDLAVA&quot;</span>: ws.Cells[rowIndex, columnIndex] = <span class="string">&quot;地质点号&quot;</span>; <span class="keyword">break</span>;</span><br><span class="line">                                        <span class="keyword">case</span> <span class="string">&quot;DWJCBH&quot;</span>: ws.Cells[rowIndex, columnIndex] = <span class="string">&quot;监测点编号&quot;</span>; <span class="keyword">break</span>;</span><br><span class="line">                                        <span class="keyword">case</span> <span class="string">&quot;DSFND&quot;</span>: ws.Cells[rowIndex, columnIndex] = <span class="string">&quot;大层编号&quot;</span>; <span class="keyword">break</span>;</span><br><span class="line">                                        <span class="keyword">case</span> <span class="string">&quot;DSFYC&quot;</span>: ws.Cells[rowIndex, columnIndex] = <span class="string">&quot;地层编号&quot;</span>; <span class="keyword">break</span>;                                           </span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    rowIndex++;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//保存</span></span><br><span class="line">                wb.Saved = <span class="literal">true</span>;</span><br><span class="line">                wb.SaveCopyAs(<span class="string">&quot;C:\\Users\\EDY\\Desktop\\表1.xlsx&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">finally</span></span><br><span class="line">            &#123;</span><br><span class="line">                wb.Close();</span><br><span class="line">                <span class="keyword">if</span> (app != <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    app.Workbooks.Close();</span><br><span class="line">                    app.Quit();</span><br><span class="line">                    <span class="built_in">int</span> generation = GC.GetGeneration(app);</span><br><span class="line">                    System.Runtime.InteropServices.Marshal.ReleaseComObject(app);</span><br><span class="line">                    app = <span class="literal">null</span>;</span><br><span class="line">                    GC.Collect(generation);</span><br><span class="line">                &#125;</span><br><span class="line">                GC.Collect();<span class="comment">//强行销毁</span></span><br><span class="line">                System.Diagnostics.Process[] excelProc = System.Diagnostics.Process.GetProcessesByName(<span class="string">&quot;EXCEL&quot;</span>);</span><br><span class="line">                DateTime startTime = <span class="keyword">new</span> DateTime();</span><br><span class="line">                <span class="built_in">int</span> m, killId = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span> (excelProc.Length &gt; <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">for</span> (m = <span class="number">0</span>; m &lt; excelProc.Length; m++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (startTime &lt; excelProc[m].StartTime)</span><br><span class="line">                        &#123;</span><br><span class="line">                            startTime = excelProc[m].StartTime;</span><br><span class="line">                            killId = m;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (excelProc[killId].HasExited == <span class="literal">false</span>)</span><br><span class="line">                        excelProc[killId].Kill();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">TryGetExcel</span>(<span class="params"><span class="keyword">out</span> List&lt;Test&gt; datas</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            datas = <span class="keyword">new</span> List&lt;Test&gt;();</span><br><span class="line">            Application app = <span class="literal">default</span>;</span><br><span class="line">            Workbook wb = <span class="literal">default</span>;</span><br><span class="line">            Worksheet ws = <span class="literal">default</span>;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//初始化</span></span><br><span class="line">                app = <span class="keyword">new</span> Application();</span><br><span class="line">                <span class="built_in">object</span> m = Missing.Value;</span><br><span class="line">                wb = app.Workbooks.Open(<span class="string">@&quot;C:\Users\EDY\Desktop\外键信息表.xlsx&quot;</span>, m, <span class="literal">true</span>, m, m, m, m, m, m, <span class="literal">true</span>, m, m, m, m, m);</span><br><span class="line">                ws = wb.Worksheets.get_Item(<span class="number">1</span>);</span><br><span class="line">                <span class="built_in">int</span> rowCount = ws.UsedRange.Cells.Rows.Count;</span><br><span class="line">                <span class="built_in">int</span> columnCount = ws.UsedRange.Cells.Columns.Count;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//获取数据</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> rowIndex = <span class="number">2</span>; rowIndex &lt;= rowCount; rowIndex++)</span><br><span class="line">                &#123;</span><br><span class="line">                    Test test = <span class="keyword">new</span> Test();</span><br><span class="line">                    <span class="keyword">for</span> (<span class="built_in">int</span> columnIndex = <span class="number">1</span>; columnIndex &lt;= columnCount; columnIndex++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">switch</span> (columnIndex)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">case</span> <span class="number">1</span>: test.TableName = ws.Cells[rowIndex, columnIndex].Value; <span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">case</span> <span class="number">2</span>: test.ColumnName = ws.Cells[rowIndex, columnIndex].Value; <span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">case</span> <span class="number">3</span>: test.AssociatedTableName = ws.Cells[rowIndex, columnIndex].Value; <span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">case</span> <span class="number">4</span>: test.AssociatedColumnName = ws.Cells[rowIndex, columnIndex].Value; <span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">case</span> <span class="number">5</span>: test.Remarks = ws.Cells[rowIndex, columnIndex].Value; <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    datas.Add(test);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">finally</span></span><br><span class="line">            &#123;</span><br><span class="line">                wb.Close();</span><br><span class="line">                <span class="keyword">if</span> (app != <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    app.Workbooks.Close();</span><br><span class="line">                    app.Quit();</span><br><span class="line">                    <span class="built_in">int</span> generation = GC.GetGeneration(app);</span><br><span class="line">                    System.Runtime.InteropServices.Marshal.ReleaseComObject(app);</span><br><span class="line">                    app = <span class="literal">null</span>;</span><br><span class="line">                    GC.Collect(generation);</span><br><span class="line">                &#125;</span><br><span class="line">                GC.Collect();<span class="comment">//强行销毁</span></span><br><span class="line">                System.Diagnostics.Process[] excelProc = System.Diagnostics.Process.GetProcessesByName(<span class="string">&quot;EXCEL&quot;</span>);</span><br><span class="line">                DateTime startTime = <span class="keyword">new</span> DateTime();</span><br><span class="line">                <span class="built_in">int</span> m, killId = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span> (excelProc.Length &gt; <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">for</span> (m = <span class="number">0</span>; m &lt; excelProc.Length; m++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (startTime &lt; excelProc[m].StartTime)</span><br><span class="line">                        &#123;</span><br><span class="line">                            startTime = excelProc[m].StartTime;</span><br><span class="line">                            killId = m;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (excelProc[killId].HasExited == <span class="literal">false</span>)</span><br><span class="line">                        excelProc[killId].Kill();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>计算机</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>C#操作浏览器的步骤</title>
    <url>/2023/09/06/C-%E6%93%8D%E4%BD%9C%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E6%AD%A5%E9%AA%A4/</url>
    <content><![CDATA[<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p>假设我要使用 C# 模拟使用浏览器进行操作，可以使用 Selenium WebDriver。Selenium 是一个自动化测试工具，其中 WebDriver 是用于模拟浏览器行为的部分。<br>首先，需要安装 Selenium WebDriver。可以使用 NuGet 包管理器来安装 Selenium.WebDriver 包。<br>接下来，可以使用以下代码模拟使用浏览器访问 Google 并进行搜索 “测试操作”：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> OpenQA.Selenium;</span><br><span class="line"><span class="keyword">using</span> OpenQA.Selenium.Chrome;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建 ChromeDriver 实例</span></span><br><span class="line">        IWebDriver driver = <span class="keyword">new</span> ChromeDriver();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 打开 Google</span></span><br><span class="line">            driver.Navigate().GoToUrl(<span class="string">&quot;https://www.google.com/&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 定位搜索框元素并输入查询内容</span></span><br><span class="line">            IWebElement searchBox = driver.FindElement(By.Name(<span class="string">&quot;q&quot;</span>));<span class="comment">//这一步也可以使用By.Id()</span></span><br><span class="line">            searchBox.SendKeys(<span class="string">&quot;测试操作&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 提交搜索</span></span><br><span class="line">            searchBox.Submit();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            Console.WriteLine(ex.Message);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 关闭浏览器</span></span><br><span class="line">            driver.Quit();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上面的代码中，我们创建了一个 ChromeDriver 的实例，它将使用 Chrome 浏览器进行模拟。然后，我们导航到 Google 的网址，找到搜索框元素，并向其发送搜索字符串 “测试操作”。最后，我们提交搜索并关闭浏览器。<br>注意，这个示例假设您已经安装了 Chrome 浏览器，同时还需要根据您的操作系统下载和设置适用于 Chrome 的 WebDriver。</p>
<h1 id="其他控件怎么填入数据？"><a href="#其他控件怎么填入数据？" class="headerlink" title="其他控件怎么填入数据？"></a>其他控件怎么填入数据？</h1><pre><code>不同类型的控件有不同的操作方法来填入或选择内容。以下是一些常见的控件和相应的操作方法：
</code></pre>
<ol>
<li><p>文本框 (Text Box):<br>使用 SendKeys 方法来输入文本内容。</p>
</li>
<li><p>下拉框 (Dropdown):<br>如果是下拉框元素，可以使用 SelectElement 类来选择值。例如：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">SelectElement dropdown = <span class="keyword">new</span> SelectElement(driver.FindElement(By.Id(<span class="string">&quot;dropdown&quot;</span>)));</span><br><span class="line">dropdown.SelectByText(<span class="string">&quot;Option 1&quot;</span>);  <span class="comment">// 通过可见文本选择选项</span></span><br><span class="line">dropdown.SelectByValue(<span class="string">&quot;value1&quot;</span>);  <span class="comment">// 通过值选择选项</span></span><br><span class="line">dropdown.SelectByIndex(<span class="number">2</span>);         <span class="comment">// 通过索引选择选项</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>复选框 (Checkbox):<br>通过调用 IWebElement.Click() 方法来选中&#x2F;取消选中复选框。例如：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">IWebElement checkbox = driver.FindElement(By.Id(<span class="string">&quot;checkbox&quot;</span>));</span><br><span class="line">checkbox.Click();  <span class="comment">// 选中</span></span><br><span class="line">checkbox.Click();  <span class="comment">// 取消选中</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>单选按钮 (Radio Button):<br>通过调用 IWebElement.Click() 方法来选择单选按钮。例如：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">IWebElement radioButton = driver.FindElement(By.Id(<span class="string">&quot;radioButton&quot;</span>));</span><br><span class="line">radioButton.Click();</span><br></pre></td></tr></table></figure>
</li>
<li><p>按钮 (Button):<br>通过调用 IWebElement.Click() 方法来点击按钮。例如：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">IWebElement button = driver.FindElement(By.Id(<span class="string">&quot;button&quot;</span>));</span><br><span class="line">button.Click();</span><br></pre></td></tr></table></figure>
</li>
<li><p>回退</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">driver.Navigate().Back(); </span><br></pre></td></tr></table></figure>
<p>请注意，以上示例假设您已经定位到了相应的元素，方法的参数可以根据实际情况进行修改。另外，还可以使用其他方法和属性来处理不同类型的控件，具体操作取决于您所使用的自动化测试工具和页面的结构。</p>
</li>
</ol>
<h1 id="如何提交，searchBox-Submit-是怎么回事，为什么不是点击某个按钮的操作，类似xxx-Click"><a href="#如何提交，searchBox-Submit-是怎么回事，为什么不是点击某个按钮的操作，类似xxx-Click" class="headerlink" title="如何提交，searchBox.Submit() 是怎么回事，为什么不是点击某个按钮的操作，类似xxx.Click()"></a>如何提交，searchBox.Submit() 是怎么回事，为什么不是点击某个按钮的操作，类似xxx.Click()</h1><p>如果您要提交，的确通常是点击某个提交按钮，使用 xxx.Click() 方法来模拟点击操作，其中 xxx 表示您定位到的相应元素。<br>在上述示例代码中，我们调用 searchBox.Submit() 方法时，它实际上会自动触发搜索框所在表单（form）的提交操作。对于标准的搜索表单，按下回车键或点击 “搜索” 按钮都会触发提交操作。</p>
<p>如果您想点击页面上的其他提交按钮，可以按照以下步骤进行操作：<br>定位到要点击的提交按钮元素。<br>使用 Click() 方法来模拟点击操作。<br>例如，假设您要点击一个 id 为 “submitButton” 的提交按钮，可以使用以下代码：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">IWebElement submitButton = driver.FindElement(By.Id(<span class="string">&quot;submitButton&quot;</span>));</span><br><span class="line">submitButton.Click();</span><br></pre></td></tr></table></figure>
<p>通过 Click() 方法，您可以模拟用户点击按钮的行为，从而触发相应的操作或页面跳转。请根据您所测试的具体情况，定位到正确的元素并使用适当的方法进行操作。</p>
]]></content>
      <categories>
        <category>计算机</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>NANA亲启</title>
    <url>/2023/07/12/NANA%E4%BA%B2%E5%90%AF/</url>
    <content><![CDATA[<div class="gallery-group-main">

  <figure class="gallery-group">
  <img class="gallery-group-img no-lightbox" src='/image/%E9%87%8E%E8%89%AF%E7%A5%9E.jpg' alt="Group Image Gallery">
  <figcaption>
  <div class="gallery-group-name">NANA亲启</div>
  <p>呀呀~~~~只有nana可以点开</p>
  <a href='/example/NANA.html'></a>
  </figcaption>
  </figure>
  
</div>]]></content>
      <categories>
        <category>恋爱</category>
      </categories>
      <tags>
        <tag>恋爱的酸臭味</tag>
      </tags>
  </entry>
  <entry>
    <title>Winform如何在DataGridForm的Cell中添加控件</title>
    <url>/2023/09/07/Winform%E5%A6%82%E4%BD%95%E5%9C%A8DataGridForm%E7%9A%84Cell%E4%B8%AD%E6%B7%BB%E5%8A%A0%E6%8E%A7%E4%BB%B6/</url>
    <content><![CDATA[<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">InsertControl</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    Button btn = <span class="keyword">new</span> Button();</span><br><span class="line">    btn.Text = <span class="string">&quot;...&quot;</span>;</span><br><span class="line">    <span class="comment">//获取DataGridView的第7列和当前选中的行的cell的Rectangle</span></span><br><span class="line">    Rectangle rect = dgvSetting.GetCellDisplayRectangle(<span class="number">7</span>, dgvSetting.CurrentCell.RowIndex, <span class="literal">true</span>);</span><br><span class="line">    btn.Location = <span class="keyword">new</span> Point(rect.Right - <span class="number">35</span>, rect.Top);<span class="comment">//获取该cell的位置并给btn</span></span><br><span class="line">    btn.Size = <span class="keyword">new</span> Size(<span class="number">35</span>, rect.Height);<span class="comment">//获取该cell的大小并给btn</span></span><br><span class="line">    dgvSetting.Controls.Add(btn);<span class="comment">//放入DataGridView的Control</span></span><br><span class="line">    btn.Show();<span class="comment">//展示该控件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>计算机</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>winform如何只生成一个exe文件？</title>
    <url>/2023/07/17/winform%E5%A6%82%E4%BD%95%E5%8F%AA%E7%94%9F%E6%88%90%E4%B8%80%E4%B8%AAexe%E6%96%87%E4%BB%B6%EF%BC%9F/</url>
    <content><![CDATA[<p>我写了一份代码，但是我不想弄一个安装包出来，而是给客户时我只想给一个exe文件，但是debug后生成的总是一个文件夹，里面包含了各种dll，怎么破?<br>step1:通过NuGet 安装ILmerge和MSBuild.ILMerge.Task<br>step2:重新生成即可</p>
]]></content>
      <categories>
        <category>计算机</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>C#如何去重</title>
    <url>/2023/09/05/C-%E5%A6%82%E4%BD%95%E5%8E%BB%E9%87%8D/</url>
    <content><![CDATA[<h1 id="C-如何去重"><a href="#C-如何去重" class="headerlink" title="C#如何去重"></a>C#如何去重</h1><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">users.Where((x,i)=&gt;users.FindIndex(s=&gt;s.name==x.name)==i).ToList();</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>计算机</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>九月</title>
    <url>/2023/08/11/%E4%B9%9D%E6%9C%88/</url>
    <content><![CDATA[<pre><code>九月了啊，是啊，已经九月了。有人问我，恋爱之后有什么变化吗？有的，但是变得怎么样了？我也说不出来，仿佛一点点地褪去了稚嫩，开始变得有计划了。
</code></pre>
]]></content>
      <categories>
        <category>恋爱</category>
      </categories>
      <tags>
        <tag>恋爱的酸臭味</tag>
      </tags>
  </entry>
  <entry>
    <title>这里是我们的相册哇</title>
    <url>/2023/07/12/%E8%BF%99%E9%87%8C%E6%98%AF%E6%88%91%E4%BB%AC%E7%9A%84%E7%9B%B8%E5%86%8C%E5%93%87/</url>
    <content><![CDATA[<div class="gallery-group-main">

  <figure class="gallery-group">
  <img class="gallery-group-img no-lightbox" src='/image/%E4%BA%91%E5%A0%87.jpg' alt="Group Image Gallery">
  <figcaption>
  <div class="gallery-group-name">拽拽的和酷酷的</div>
  <p>拽拽的和酷酷的</p>
  <a href='/gallery/%E6%8B%BD%E6%8B%BD%E7%9A%84%E5%92%8C%E9%85%B7%E9%85%B7%E7%9A%84'></a>
  </figcaption>
  </figure>
  
</div>
<div class="gallery-group-main">

  <figure class="gallery-group">
  <img class="gallery-group-img no-lightbox" src='/image/%E4%BA%91%E5%A0%87.jpg' alt="Group Image Gallery">
  <figcaption>
  <div class="gallery-group-name">拽拽的和酷酷的</div>
  <p>明信片版</p>
  <a href='/example/photo.html'></a>
  </figcaption>
  </figure>
  
</div>
<div class="gallery-group-main">

  <figure class="gallery-group">
  <img class="gallery-group-img no-lightbox" src='/image/%E9%A3%8E%E6%99%AF.jpg' alt="Group Image Gallery">
  <figcaption>
  <div class="gallery-group-name">过年</div>
  <p>过年</p>
  <a href='/video/%E8%BF%87%E5%B9%B4.mp4'></a>
  </figcaption>
  </figure>
  
</div>
<div class="gallery-group-main">

  <figure class="gallery-group">
  <img class="gallery-group-img no-lightbox" src='/image/%E4%BA%91%E5%A0%87.jpg' alt="Group Image Gallery">
  <figcaption>
  <div class="gallery-group-name">登记照</div>
  <p>登记照</p>
  <a href='/gallery/%E7%99%BB%E8%AE%B0%E7%85%A7'></a>
  </figcaption>
  </figure>
  
</div>]]></content>
      <categories>
        <category>恋爱</category>
      </categories>
      <tags>
        <tag>恋爱的酸臭味</tag>
      </tags>
  </entry>
  <entry>
    <title>遇见你，真好</title>
    <url>/2023/07/14/%E9%81%87%E8%A7%81%E4%BD%A0%EF%BC%8C%E7%9C%9F%E5%A5%BD/</url>
    <content><![CDATA[<p>和小姚第一次相遇是在什么时候？小温忘了，时间好长，过去也好久，听小温妈妈说要追溯到幼儿园的时候，“有一次啊，我送你们这群小孩子去上学，但是小姚她奶奶老是迟到，都不是一次两次了，我就不想惯着她，这次经过她家一看，果然又没来，我就……”，说了一半却哈哈大笑了起来，小温忙追问：“然后呢，然后怎么了？”，“然后啊，就……”<br>然后啊，就一晃就过去了二十多年。<br>小温和小姚再也没有交集过，仿佛彼此已经忘了小时候的这个玩伴，时间与空间慢慢将他们拉远，两人只是两条交线，彼此间的拥有只存在于这一点的罢了，直到有一天，她忽然出现在小温的眼前。</p>
<h3 id="起"><a href="#起" class="headerlink" title="起"></a>起</h3><p>“小温啊，你明天帮忙载一下妈妈姐妹的女儿上班好不好啊。”小温的妈妈开门进来说到，“她和你工作的地方还蛮近的。”<br>“不想，我没那么多时间啊。”放下手机，小温说到，小端午骂骂咧咧地走了进来，跳上床露出了肚皮。小温顺手搓了搓它的猫头。<br>“而且我上班时间很早的，和她对不上吧。”<br>“哎呀你帮一下忙嘛，老妈都和他们说好了。”<br>哎，真够麻烦的，八竿子打不着的姐妹，小温心想到明天还要带个拖油瓶就感觉脑仁疼<br>“那行吧，她在那呢？”<br>“就在家辉的婚礼上，走我带你去见她们。”，小温妈妈说到，顺手捏住了小端午的后颈脖提了起来，伴随着小端午骂骂咧咧的声音下了楼。</p>
<h3 id="承"><a href="#承" class="headerlink" title="承"></a>承</h3><p>好吧，小温承认，此女的确有几分姿色，竟能只凭一个笑容就引得自己心动不已，哼哼很好，女人，你成功吸引了我的注意。<br>星期一早上，一路正经。<br>星期二早上，没关系，以前也是一个人上班的。<br>星期三早上，没关系，以前也是一个人上班的。<br>星期四早上，小温呀小温，你怎么能如此堕落，以后要专心工作，不要再想她了。<br>星期五早上，嘻嘻，礼拜五了，叫小姚一起下班嘿嘿。<br>“哇，你还买了这么多东西。”<br>“那必然的呀，毕竟不能白坐你的车嘛。”<br>“那好，那我不客气了。”（帅哥干饭）“歪，25号是我的生日，我叫了奥奥哥哥他们，你一起来吧。”<br>“啊？我？！！……好吧。”</p>
<h3 id="转"><a href="#转" class="headerlink" title="转"></a>转</h3><p>夜深人静，小温辗转难安，这或许是他这一生最大的一个难题，虽然此时并没确定关系，但今晚无疑是对小温的一个巨大的打击。<br>“对不起了，我可能要食言了。”<br>“你怎么啦？”<br>小姚开头这句话就给小温带来了莫大的危机感，但小温这句话发出去后犹如泥牛入海一样。<br>过了好久，小姚才发来一句：“我老爸不让我退房子。”<br>小温也不知道怎么回她，不知怎的，一向谨慎的他竟然一反常态地说到：“没关系呀，那就不退了，但是我们要每天一起减肥！”<br>“好！一起减肥。”</p>
<h3 id="合"><a href="#合" class="headerlink" title="合"></a>合</h3><p>“歪！”<br>“干嘛啊？”<br>“你看那儿。”<br>“玫瑰？”<br>“嗯。”<br>“玫瑰怎么啦。”<br>“嗯~也没什么啦，就是今天是11月11号欸”<br>“嗯，11月11号怎么啦？”<br>“我有个提议，我们假装情侣怎么样？”<br>“啊？”</p>
<h3 id="番外"><a href="#番外" class="headerlink" title="番外"></a>番外</h3><p>“歪，你相信天上有神仙嘛？”<br>“干嘛问这个？”<br>“你信不信嘛！”<br>“不信，我是个坚定的共产党员，不相信封建迷信。”<br>“哦哦哦~所以你是说把我们拉在一起的是马克思！！！”<br>“歪，巴嘎我不是这个意思啦！”<br>（完）</p>
]]></content>
      <categories>
        <category>恋爱</category>
      </categories>
      <tags>
        <tag>恋爱的酸臭味</tag>
      </tags>
  </entry>
  <entry>
    <title>资源下载</title>
    <url>/2023/09/13/%E8%B5%84%E6%BA%90%E4%B8%8B%E8%BD%BD/</url>
    <content><![CDATA[<h1 id="普通文件"><a href="#普通文件" class="headerlink" title="普通文件"></a>普通文件</h1><p><a href="/download/Hexo+Github.docx">Hexo+Github搭建自己的专属博客</a></p>
<h1 id="游戏"><a href="#游戏" class="headerlink" title="游戏"></a>游戏</h1><p><a href="/download/CE_7.5%E4%B8%AD%E6%96%87%E7%89%88.zip">CE_7.5中文版</a></p>
]]></content>
      <categories>
        <category>资源下载</category>
      </categories>
  </entry>
  <entry>
    <title>C#写一个简单的串口调试器</title>
    <url>/2023/09/19/C-%E5%86%99%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E4%B8%B2%E5%8F%A3%E8%B0%83%E8%AF%95%E5%99%A8/</url>
    <content><![CDATA[<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.ComponentModel;</span><br><span class="line"><span class="keyword">using</span> System.Data;</span><br><span class="line"><span class="keyword">using</span> System.Drawing;</span><br><span class="line"><span class="keyword">using</span> System.IO.Ports;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">SFC_SCADA</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">MainForm</span> : <span class="title">Form</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MainForm</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">private</span> SerialPort _serialPort = <span class="keyword">new</span> SerialPort();</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">bool</span> _isReadTXTDisplayString = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">bool</span> _isWriteTXTDisplayString = <span class="literal">true</span>;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">MainForm_Load</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            _serialPort.DataReceived += SerialPort_DataReceived;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 串口数据读取</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;sender&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;e&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">SerialPort_DataReceived</span>(<span class="params"><span class="built_in">object</span> sender, SerialDataReceivedEventArgs e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            BeginInvoke(<span class="keyword">new</span> Action(() =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (_isReadTXTDisplayString)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">byte</span>[] buf = <span class="keyword">new</span> <span class="built_in">byte</span>[_serialPort.BytesToRead];</span><br><span class="line">                    _serialPort.Read(buf, <span class="number">0</span>, buf.Length);</span><br><span class="line">                    <span class="built_in">string</span> str = Encoding.UTF8.GetString(buf);</span><br><span class="line">                    rtRead.Text += str;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">byte</span>[] buf = <span class="keyword">new</span> <span class="built_in">byte</span>[_serialPort.BytesToRead];</span><br><span class="line">                    _serialPort.Read(buf, <span class="number">0</span>, buf.Length);</span><br><span class="line">                    StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">                    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; buf.Length; i++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (i == <span class="number">0</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            sb.Append(buf[i].ToString(<span class="string">&quot;X2&quot;</span>));</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            sb.Append(<span class="string">&quot; &quot;</span> + buf[i].ToString(<span class="string">&quot;X2&quot;</span>));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    rtRead.Text += sb.ToString();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 连接串口</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;sender&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;e&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">btnLink_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (_serialPort.IsOpen)</span><br><span class="line">                &#123;</span><br><span class="line">                    _serialPort.Close();</span><br><span class="line">                    btnLink.BackColor = SystemColors.Control;</span><br><span class="line">                    btnLink.Text = <span class="string">&quot;串口未连接&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    _serialPort.PortName = txtCOM.Text;</span><br><span class="line">                    <span class="built_in">int</span>.TryParse(txtBaudRate.Text, <span class="keyword">out</span> <span class="built_in">int</span> baudRate);</span><br><span class="line">                    _serialPort.BaudRate = baudRate;</span><br><span class="line">                    _serialPort.DataBits = <span class="number">8</span>;</span><br><span class="line">                    _serialPort.Parity = Parity.None;</span><br><span class="line">                    _serialPort.StopBits = StopBits.One;</span><br><span class="line">                    _serialPort.Handshake = Handshake.None;</span><br><span class="line">                    _serialPort.Open();</span><br><span class="line">                    btnLink.BackColor = Color.Red;</span><br><span class="line">                    btnLink.Text = <span class="string">&quot;串口已连接&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">            &#123;</span><br><span class="line">                MessageBox.Show(ex.Message, <span class="string">&quot;串口连接失败&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 清空数据读取框</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;sender&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;e&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">btnReadClear_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span> =&gt; rtRead.Text = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 切换数据读取框文字格式</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;sender&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;e&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">btnReadFormat_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> str = rtRead.Text;</span><br><span class="line">            <span class="keyword">if</span> (_isReadTXTDisplayString)</span><br><span class="line">            &#123;</span><br><span class="line">                rtRead.Text = StringToHexString(str, Encoding.UTF8);</span><br><span class="line">                _isReadTXTDisplayString = <span class="literal">false</span>;</span><br><span class="line">                btnReadFormat.Text = <span class="string">&quot;HEX&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                rtRead.Text = HexStringToString(str, Encoding.UTF8).ToString();</span><br><span class="line">                _isReadTXTDisplayString = <span class="literal">true</span>;</span><br><span class="line">                btnReadFormat.Text = <span class="string">&quot;ABC&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 切换数据发送框文字格式</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;sender&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;e&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">btnWriteFormat_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> str = rtWrite.Text;</span><br><span class="line">            <span class="keyword">if</span> (_isWriteTXTDisplayString)</span><br><span class="line">            &#123;</span><br><span class="line">                rtWrite.Text = StringToHexString(str, Encoding.UTF8);</span><br><span class="line">                _isWriteTXTDisplayString = <span class="literal">false</span>;</span><br><span class="line">                btnWriteFormat.Text = <span class="string">&quot;HEX&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                rtWrite.Text = HexStringToString(str, Encoding.UTF8).ToString();</span><br><span class="line">                _isWriteTXTDisplayString = <span class="literal">true</span>;</span><br><span class="line">                btnWriteFormat.Text = <span class="string">&quot;ABC&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 清空数据发送框</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;sender&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;e&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">btnWriteClear_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span> =&gt; rtWrite.Text = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 发送</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;sender&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;e&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">btnWrite_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            BeginInvoke(<span class="keyword">new</span> Action(() =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                _serialPort.Write(rtWrite.Text);</span><br><span class="line">            &#125;));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 字符串转换为16进制字符</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="built_in">string</span> <span class="title">StringToHexString</span>(<span class="params"><span class="built_in">string</span> s, Encoding encode</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">byte</span>[] b = encode.GetBytes(s);</span><br><span class="line">            <span class="built_in">string</span> result = <span class="built_in">string</span>.Empty;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; b.Length; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> str = Convert.ToString(b[i], <span class="number">16</span>);</span><br><span class="line">                <span class="keyword">if</span> (str == <span class="string">&quot;a&quot;</span> || str == <span class="string">&quot;b&quot;</span> || str == <span class="string">&quot;c&quot;</span> || str == <span class="string">&quot;d&quot;</span> || str == <span class="string">&quot;e&quot;</span> || str == <span class="string">&quot;f&quot;</span>)</span><br><span class="line">                    result += <span class="string">&quot;0&quot;</span> + str + <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    result += str + <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 16进制字符转换为字符串</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="built_in">string</span> <span class="title">HexStringToString</span>(<span class="params"><span class="built_in">string</span> hs, Encoding encode</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            hs = hs.Replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="built_in">byte</span>[] b = <span class="keyword">new</span> <span class="built_in">byte</span>[hs.Length / <span class="number">2</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; hs.Length / <span class="number">2</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> strTemp = hs.Substring(i * <span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">                b[i] = Convert.ToByte(strTemp, <span class="number">16</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> encode.GetString(b);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>计算机</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>C#多线程</title>
    <url>/2023/08/16/C-%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h1><h2 id="Task如何开启多线程"><a href="#Task如何开启多线程" class="headerlink" title="Task如何开启多线程"></a>Task如何开启多线程</h2><p>以下为Task创建多线程的三种方法，个人比较推荐使用方法2</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方法1:创建task后使用Start()启动</span></span><br><span class="line">Task task = <span class="keyword">new</span> Task(() =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;01:这里开启了一个线程：线程ID: <span class="subst">&#123;Thread.CurrentThread.ManagedThreadId.ToString(<span class="string">&quot;00&quot;</span>)&#125;</span>&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">task.Start();</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法2:直接Run</span></span><br><span class="line">Task.Run(() =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;02:这里开启了一个线程：线程ID: <span class="subst">&#123;Thread.CurrentThread.ManagedThreadId.ToString(<span class="string">&quot;00&quot;</span>)&#125;</span>&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法3:使用Factory</span></span><br><span class="line">Task.Factory.StartNew(() =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;03:这里开启了一个线程：线程ID: <span class="subst">&#123;Thread.CurrentThread.ManagedThreadId.ToString(<span class="string">&quot;00&quot;</span>)&#125;</span>&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="Task的线程等待和延续"><a href="#Task的线程等待和延续" class="headerlink" title="Task的线程等待和延续"></a>Task的线程等待和延续</h2><p>Task下的线程等待和延续主要以下几类：</p>
<ol>
<li>Wait：针对单个Task的实例，可以task.Wait()进行线程等待. (实例方法)<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">Task task = <span class="keyword">new</span> Task(() =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;01:这里开启了一个线程：线程ID: <span class="subst">&#123;Thread.CurrentThread.ManagedThreadId.ToString(<span class="string">&quot;00&quot;</span>)&#125;</span>&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">task.Start();</span><br><span class="line">task.Wait();</span><br></pre></td></tr></table></figure></li>
<li>WaitAny：执行的线程等待其中任何一个线程执行完毕即可执行(如果主线程执行,则卡主线程)(Task的静态方法)<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">List&lt;Task&gt; taskList = <span class="keyword">new</span> List&lt;Task&gt;();</span><br><span class="line">taskList.Add(factory.StartNew(o =&gt; Console.WriteLine(<span class="number">1</span>), <span class="string">&quot;1&quot;</span>));</span><br><span class="line">taskList.Add(factory.StartNew(o =&gt; Console.WriteLine(<span class="number">2</span>), <span class="string">&quot;2&quot;</span>));</span><br><span class="line">Task.WaitAny(taskList.ToArray());</span><br></pre></td></tr></table></figure></li>
<li>WaitAll：执行的线程等待其中所有线程执行完毕方可执行(如果主线程执行,则卡主线程)(Task的静态方法)<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">List&lt;Task&gt; taskList = <span class="keyword">new</span> List&lt;Task&gt;();</span><br><span class="line">taskList.Add(factory.StartNew(o =&gt; Console.WriteLine(<span class="number">1</span>), <span class="string">&quot;1&quot;</span>));</span><br><span class="line">taskList.Add(factory.StartNew(o =&gt; Console.WriteLine(<span class="number">2</span>), <span class="string">&quot;2&quot;</span>));</span><br><span class="line">Task.WaitAll(taskList.ToArray());</span><br></pre></td></tr></table></figure></li>
<li>WhenAny + ContinueWith：与ContinueWith配合执行,当传入的线程中任何一个线程执行完毕，继续执行ContinueWith中的任务(属于开启新线程，不卡主线程)(Task的静态方法)<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">List&lt;Task&gt; taskList = <span class="keyword">new</span> List&lt;Task&gt;();</span><br><span class="line">taskList.Add(factory.StartNew(o =&gt; Console.WriteLine(<span class="number">1</span>), <span class="string">&quot;1&quot;</span>));</span><br><span class="line">taskList.Add(factory.StartNew(o =&gt; Console.WriteLine(<span class="number">2</span>), <span class="string">&quot;2&quot;</span>));</span><br><span class="line">Task.WhenAny(taskList.ToArray()).ContinueWith((m)=&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//做一些操作</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
<li>WhenAll + ContinueWith：与ContinueWith配合执行,当传入的线程中所有线程执行完毕，继续执行ContinueWith中的任务(属于开启新线程，不卡主线程)(Task的静态方法)<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">List&lt;Task&gt; taskList = <span class="keyword">new</span> List&lt;Task&gt;();</span><br><span class="line">taskList.Add(factory.StartNew(o =&gt; Console.WriteLine(<span class="number">1</span>), <span class="string">&quot;1&quot;</span>));</span><br><span class="line">taskList.Add(factory.StartNew(o =&gt; Console.WriteLine(<span class="number">2</span>), <span class="string">&quot;2&quot;</span>));</span><br><span class="line">Task.WhenAll(taskList.ToArray()).ContinueWith((m)=&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//做一些操作</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>计算机</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>C#如何生成动态类</title>
    <url>/2023/12/14/C-%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90%E5%8A%A8%E6%80%81%E7%B1%BB/</url>
    <content><![CDATA[<h1 id="C-如何生成动态类"><a href="#C-如何生成动态类" class="headerlink" title="C#如何生成动态类"></a>C#如何生成动态类</h1><p>这里我们以生成一个History类来举例</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Autofac;</span><br><span class="line"><span class="keyword">using</span> FreeSql.DataAnnotations;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Reflection;</span><br><span class="line"><span class="keyword">using</span> System.Reflection.Emit;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Ty.Frame.Helpers</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 历史记录帮助类</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HistoryHelper</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 程序集名称</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">string</span> ASSEMBLY_NAME &#123; <span class="keyword">get</span>; &#125; = <span class="string">&quot;Ty.History.Entity&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 生成History</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Type <span class="title">GenerateHistoryType</span>(<span class="params">Type entityType</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> assemblyName = <span class="keyword">new</span> AssemblyName(ASSEMBLY_NAME);</span><br><span class="line">            <span class="comment">//AssemblyBuilderAccess.Run表示这个程序集可以执行，但不能存储</span></span><br><span class="line">            <span class="comment">//AssemblyBuilderAccess.RunAndCollect表示这个程序集不再可访问时，它将自动卸载并回收内存。那么在这里具体表现则是在这个域结束之后</span></span><br><span class="line">            <span class="keyword">var</span> assemblyBuilder = AssemblyBuilder.DefineDynamicAssembly(assemblyName, AssemblyBuilderAccess.RunAndCollect);</span><br><span class="line">            <span class="keyword">var</span> moduleBuilder = assemblyBuilder.DefineDynamicModule(ASSEMBLY_NAME);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> tableAttType = <span class="keyword">typeof</span>(TableAttribute);</span><br><span class="line">            <span class="comment">//创建一个自定义的动态类</span></span><br><span class="line">            TypeBuilder typeBuilder = moduleBuilder.DefineType(entityType.FullName + <span class="string">&quot;History&quot;</span>,</span><br><span class="line">                TypeAttributes.Public |TypeAttributes.Class |TypeAttributes.AutoClass |</span><br><span class="line">                TypeAttributes.AnsiClass |TypeAttributes.BeforeFieldInit |TypeAttributes.AutoLayout, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//自定义构造函数</span></span><br><span class="line">            Type[] types = <span class="keyword">new</span> Type[<span class="number">1</span>];</span><br><span class="line">            types[<span class="number">0</span>] = <span class="keyword">typeof</span>(<span class="built_in">int</span>);</span><br><span class="line">            ConstructorInfo con = tableAttType.GetConstructor(Type.EmptyTypes);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//构造一个特性[Table(Name = &quot;xxx_his&quot;)]，因为我用的ORM是Freesql，要映射到数据库的话必须要在类上写上这个特性才行，读者可以自行构造想要的特性，或者不构造</span></span><br><span class="line">            <span class="comment">//自定义属性</span></span><br><span class="line">            <span class="keyword">var</span> propInfos = <span class="keyword">new</span> PropertyInfo[<span class="number">1</span>] &#123; tableAttType.GetProperty(<span class="keyword">nameof</span>(TableAttribute.Name)) &#125;;</span><br><span class="line">            <span class="comment">//属性的值</span></span><br><span class="line">            <span class="keyword">var</span> tableAtt = entityType.GetCustomAttribute(tableAttType) <span class="keyword">as</span> TableAttribute;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//创建一个自定义的动态特性</span></span><br><span class="line">            <span class="keyword">var</span> attBuilder = <span class="keyword">new</span> CustomAttributeBuilder(</span><br><span class="line">                con,<span class="comment">//自定义的构造函数</span></span><br><span class="line">                <span class="keyword">new</span> <span class="built_in">object</span>[<span class="number">0</span>],<span class="comment">//构造函数里的参数</span></span><br><span class="line">                propInfos,<span class="comment">//你这个动态特性里的属性</span></span><br><span class="line">                <span class="keyword">new</span> <span class="built_in">object</span>[] &#123; tableAtt.Name + <span class="string">&quot;_his&quot;</span> &#125;</span><br><span class="line">                );</span><br><span class="line"></span><br><span class="line">            typeBuilder.SetCustomAttribute(attBuilder);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//生成自定义属性，由于要进行Set和Get的原因，所以比较麻烦。</span></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> entityType.GetProperties())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//添加动态字段</span></span><br><span class="line">                FieldBuilder fieldBuilder = typeBuilder.DefineField(<span class="string">&quot;_&quot;</span> + prop.Name, prop.GetType(), FieldAttributes.Private);</span><br><span class="line">                <span class="comment">//添加动态属性</span></span><br><span class="line">                PropertyBuilder propertyBuilder = typeBuilder.DefineProperty(prop.Name, PropertyAttributes.HasDefault, prop.PropertyType, <span class="literal">null</span>);</span><br><span class="line">                <span class="comment">//添加动态方法(就是给你的属性public int MyProperty添加&#123; get; set; &#125;)</span></span><br><span class="line">                <span class="comment">//Get</span></span><br><span class="line">                MethodBuilder getPropMthdBldr = typeBuilder.DefineMethod(<span class="string">&quot;get_&quot;</span> + prop.Name, MethodAttributes.Public | MethodAttributes.SpecialName | MethodAttributes.HideBySig, prop.PropertyType, Type.EmptyTypes);</span><br><span class="line">                ILGenerator getIl = getPropMthdBldr.GetILGenerator();</span><br><span class="line">                getIl.Emit(OpCodes.Ldarg_0);</span><br><span class="line">                getIl.Emit(OpCodes.Ldfld, fieldBuilder);</span><br><span class="line">                getIl.Emit(OpCodes.Ret);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//Set</span></span><br><span class="line">                MethodBuilder setPropMthdBldr = typeBuilder.DefineMethod(<span class="string">&quot;set_&quot;</span> + prop.Name,</span><br><span class="line">                      MethodAttributes.Public |</span><br><span class="line">                      MethodAttributes.SpecialName |</span><br><span class="line">                      MethodAttributes.HideBySig,</span><br><span class="line">                      <span class="literal">null</span>, <span class="keyword">new</span>[] &#123; prop.PropertyType &#125;);</span><br><span class="line">                ILGenerator setIl = setPropMthdBldr.GetILGenerator();</span><br><span class="line">                Label modifyProperty = setIl.DefineLabel();</span><br><span class="line">                Label exitSet = setIl.DefineLabel();</span><br><span class="line">                setIl.MarkLabel(modifyProperty);</span><br><span class="line">                setIl.Emit(OpCodes.Ldarg_0);</span><br><span class="line">                setIl.Emit(OpCodes.Ldarg_1);</span><br><span class="line">                setIl.Emit(OpCodes.Stfld, fieldBuilder);</span><br><span class="line">                setIl.Emit(OpCodes.Nop);</span><br><span class="line">                setIl.MarkLabel(exitSet);</span><br><span class="line">                setIl.Emit(OpCodes.Ret);</span><br><span class="line"></span><br><span class="line">                propertyBuilder.SetGetMethod(getPropMthdBldr);</span><br><span class="line">                propertyBuilder.SetSetMethod(setPropMthdBldr);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> typeBuilder.CreateTypeInfo().AsType();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>计算机</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP与HTTPS</title>
    <url>/2023/12/28/HTTP%E4%B8%8EHTTPS/</url>
    <content><![CDATA[<h1 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h1><h2 id="HTTPS是什么？"><a href="#HTTPS是什么？" class="headerlink" title="HTTPS是什么？"></a>HTTPS是什么？</h2><p>HTTP协议是超文本传输协议的缩写，英文是Hyper Text Transfer Protocol。它是从WEB服务器传输超文本标记语言(HTML)到本地浏览器的传送协议。<br>设计HTTP最初的目的是为了提供一种发布和接收HTML页面的方法。</p>
<h2 id="HTTP原理"><a href="#HTTP原理" class="headerlink" title="HTTP原理"></a>HTTP原理</h2><p>HTTP是一个基于TCP&#x2F;IP通信协议来传递数据的协议，传输的数据类型为HTML 文件,、图片文件, 查询结果等。<br>HTTP协议一般用于B&#x2F;S架构。浏览器作为HTTP客户端通过URL向HTTP服务端即WEB服务器发送所有请求。</p>
<h2 id="HTTP特点"><a href="#HTTP特点" class="headerlink" title="HTTP特点"></a>HTTP特点</h2><ol>
<li>http协议支持客户端&#x2F;服务端模式，也是一种请求&#x2F;响应模式的协议。</li>
<li>简单快速：客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有GET、HEAD、POST。</li>
<li>灵活：HTTP允许传输任意类型的数据对象。传输的类型由Content-Type加以标记。</li>
<li>无连接：限制每次连接只处理一个请求。服务器处理完请求，并收到客户的应答后，即断开连接，但是却不利于客户端与服务器保持会话连接，为了弥补这种不足，产生了两项记录http状态的技术，一个叫做Cookie,一个叫做Session。</li>
<li>无状态：无状态是指协议对于事务处理没有记忆，后续处理需要前面的信息，则必须重传。</li>
</ol>
<h2 id="HTTP请求方法"><a href="#HTTP请求方法" class="headerlink" title="HTTP请求方法"></a>HTTP请求方法</h2><ol>
<li>GET:请求指定的页面信息，并返回实体主体。</li>
<li>POST:向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的建立和&#x2F;或已有资源的修改。</li>
<li>HEAD:类似于get请求，只不过返回的响应中没有具体的内容，用于获取报头</li>
<li>PUT:从客户端向服务器传送的数据取代指定的文档的内容。</li>
<li>DELETE:请求服务器删除指定的页面。</li>
</ol>
<h1 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h1><h2 id="HTTPS是什么？-1"><a href="#HTTPS是什么？-1" class="headerlink" title="HTTPS是什么？"></a>HTTPS是什么？</h2><p>HTTPS 协议（HyperText Transfer Protocol over Secure Socket Layer）：可以理解为HTTP+SSL&#x2F;TLS，HTTPS中的“S”是指SSL，可以认为HTTPS是通过SSL加密后再用HTTP来传输的协议。</p>
<h3 id="SSL是什么，客户端和服务器之间传输数据时是怎么通过SSL加密的？"><a href="#SSL是什么，客户端和服务器之间传输数据时是怎么通过SSL加密的？" class="headerlink" title="SSL是什么，客户端和服务器之间传输数据时是怎么通过SSL加密的？"></a>SSL是什么，客户端和服务器之间传输数据时是怎么通过SSL加密的？</h3><p><strong>SSL（Secure Socket Layer，安全套接字层）：1994年为Netscape所研发，SSL协议位于TCP&#x2F;IP协议与各种应用层协议之间，为数据通讯提供安全支持，而客户端与服务器之间则是这么加密的：</strong></p>
<ol>
<li>首先客户端通过URL访问服务器建立SSL连接。</li>
<li>服务端收到客户端请求后，会将网站支持的证书信息（证书中包含公钥）传送一份给客户端。</li>
<li>客户端建立会话密钥，然后利用网站的公钥将会话密钥加密，并传送给网站。</li>
<li>服务器利用自己的私钥解密出会话密钥。</li>
<li>服务器利用会话密钥加密与客户端之间的通信。</li>
</ol>
<p><strong>对上面的步骤，我再来用“间谍”和“组织”来更形象地解释一下</strong></p>
<ol>
<li>首先，间谍向组织请求说想要向组织获取一个情报。</li>
<li>组织收到间谍的请求后，将一个带锁的“箱子A”（公钥）发给间谍，同时他自己手里打造了一把“钥匙A”（私钥）。</li>
<li>间谍收到箱子后，把自己创造的“通信密码”（会话密钥）和想要获取的情报放在了“箱子A”里邮寄给了组织。</li>
<li>组织收到了自己的“箱子A”，他用“钥匙A”打开了“箱子A”，取出了间谍创造的“通信密码”，通信密码只有七个字：“翻译成摩斯密码^v^”。</li>
<li>在阅读了间谍的需求后，他们将间谍想要的消息翻译成了摩斯密码，然后发给了间谍。</li>
</ol>
<p>需要注意的是，每次HTTPS请求都会生成一个独立的会话密钥，所以如果后续间谍又有想要什么组织帮助的，就再这么折腾一轮。</p>
]]></content>
      <categories>
        <category>C#学习路线——HTTP与HTTPS</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>建造者模式</title>
    <url>/2024/01/03/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>建造者模式（Builder Pattern）是一种对象构建设计模式，它可以将一个复杂对象的构建与它的表示分离开来，使得同样的构建过程可以创建不同的表示。<br>以下是一个使用C#编写的建造者模式的例子：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 产品类：电脑  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Computer</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Ram &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Hdd &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Cpu &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 可以添加更多的属性，例如显示器、显卡等  </span></span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShowComputerSpecs</span>()</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        Console.WriteLine(<span class="string">&quot;RAM: &quot;</span> + Ram);  </span><br><span class="line">        Console.WriteLine(<span class="string">&quot;HDD: &quot;</span> + Hdd);  </span><br><span class="line">        Console.WriteLine(<span class="string">&quot;CPU: &quot;</span> + Cpu);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 抽象建造者类：为创建产品对象定义了一个接口  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">ComputerBuilder</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">protected</span> Computer _computer = <span class="keyword">new</span> Computer();  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 定义构建产品的步骤，但是不提供具体的实现，由子类负责实现  </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">SetRam</span>()</span>;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">SetHdd</span>()</span>;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">SetCpu</span>()</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 返回构建好的产品对象  </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Computer <span class="title">GetComputer</span>()</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">return</span> _computer;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 具体建造者类：实现了抽象建造者接口，负责构建具体的产品对象  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">GamingComputerBuilder</span> : <span class="title">ComputerBuilder</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">SetRam</span>()</span> =&gt; _computer.Ram = <span class="string">&quot;16GB DDR4&quot;</span>;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">SetHdd</span>()</span> =&gt; _computer.Hdd = <span class="string">&quot;1TB SSD&quot;</span>;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">SetCpu</span>()</span> =&gt; _computer.Cpu = <span class="string">&quot;Intel Core i7&quot;</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">OfficeComputerBuilder</span> : <span class="title">ComputerBuilder</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">SetRam</span>()</span> =&gt; _computer.Ram = <span class="string">&quot;8GB DDR4&quot;</span>;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">SetHdd</span>()</span> =&gt; _computer.Hdd = <span class="string">&quot;512GB SSD&quot;</span>;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">SetCpu</span>()</span> =&gt; _computer.Cpu = <span class="string">&quot;Intel Core i5&quot;</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 指挥者类：负责调用建造者对象来构建产品对象，并返回构建好的产品对象  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Director</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">private</span> ComputerBuilder _computerBuilder;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 通过构造器或者setter注入具体的建造者对象  </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Director</span>(<span class="params">ComputerBuilder computerBuilder</span>)</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        _computerBuilder = computerBuilder;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 构建产品对象的方法，返回构建好的产品对象  </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Computer <span class="title">Build</span>()</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        _computerBuilder.SetRam();  </span><br><span class="line">        _computerBuilder.SetHdd();  </span><br><span class="line">        _computerBuilder.SetCpu();  </span><br><span class="line">        <span class="keyword">return</span> _computerBuilder.GetComputer();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 客户端代码：使用指挥者类和具体的建造者类来构建产品对象，并展示产品信息  </span></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="comment">// 创建一个游戏电脑的建造者对象，并通过指挥者构建一台游戏电脑  </span></span><br><span class="line">        ComputerBuilder gamingBuilder = <span class="keyword">new</span> GamingComputerBuilder();  </span><br><span class="line">        Director gamingDirector = <span class="keyword">new</span> Director(gamingBuilder);  </span><br><span class="line">        Computer gamingComputer = gamingDirector.Build();  </span><br><span class="line">        gamingComputer.ShowComputerSpecs(); <span class="comment">// 输出游戏电脑的配置信息  </span></span><br><span class="line">        Console.WriteLine(); <span class="comment">// 输出空行分隔两个产品信息  </span></span><br><span class="line">          </span><br><span class="line">        <span class="comment">// 创建一个办公电脑的建造者对象，并通过指挥者构建一台办公电脑  </span></span><br><span class="line">        ComputerBuilder officeBuilder = <span class="keyword">new</span> OfficeComputerBuilder();  </span><br><span class="line">        Director officeDirector = <span class="keyword">new</span> Director(officeBuilder);  </span><br><span class="line">        Computer officeComputer = officeDirector.Build();  </span><br><span class="line">        officeComputer.ShowComputerSpecs(); <span class="comment">// 输出办公电脑的配置信息  </span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>上述代码中定义了一个<code>Computer</code>类作为产品类，包含了电脑的硬件配置信息。<code>ComputerBuilder</code>是一个抽象建造者类，定义了构建<code>Computer</code>对象的步骤，但不提供具体实现。<code>GamingComputerBuilder</code>和<code>OfficeComputerBuilder</code>是两个具体建造者类，分别实现了构建游戏电脑和办公电脑的具体步骤。<code>Director</code>是指挥者类，它负责使用具体的建造者对象来构建产品对象。在客户端代码中，我们分别创建了游戏电脑和办公电脑的建造者对象，并通过指挥者类构建了相应的产品对象，并展示了它们的配置信息。</p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>自研ORM-PGEntity</title>
    <url>/2024/01/16/%E8%87%AA%E7%A0%94ORM-PGEntity/</url>
    <content><![CDATA[<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Npgsql;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.ComponentModel;</span><br><span class="line"><span class="keyword">using</span> System.Data;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Linq.Expressions;</span><br><span class="line"><span class="keyword">using</span> System.Reflection;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DBEntity</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> PGEntity</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PGEntity</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 连接字符串</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">protected</span> <span class="built_in">string</span> _connectionString = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 连接</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">protected</span> NpgsqlConnection _con = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 是否附加事务</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">bool</span> _isAppendTran = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 事务</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">private</span> NpgsqlTransaction _tran;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> sql</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">protected</span> <span class="built_in">string</span> _sql = <span class="built_in">string</span>.Empty;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> sql集合</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">protected</span> List&lt;<span class="built_in">string</span>&gt; _sqls = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> sql参数</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">protected</span> List&lt;NpgsqlParameter&gt; _sqlParameters = <span class="keyword">new</span> List&lt;NpgsqlParameter&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 事务属性</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">protected</span> NpgsqlTransaction Tran</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span> &#123; <span class="keyword">return</span> _tran; &#125;</span><br><span class="line">            <span class="keyword">set</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (!_isAppendTran)</span><br><span class="line">                &#123;</span><br><span class="line">                    _isAppendTran = <span class="literal">true</span>;</span><br><span class="line">                    _tran = <span class="keyword">value</span>;</span><br><span class="line">                    _con = _tran.Connection;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 正在运行的新增PGEntity</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">protected</span> PGEntity _runTimePGEntityInsert = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 正在运行的删除PGEntity</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">protected</span> PGEntity _runTimePGEntityDelete = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 正在运行的修改PGEntity</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">protected</span> PGEntity _runTimePGEntityUpdate = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 正在运行的查询PGEntity</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">protected</span> PGEntity _runTimePGEntitySelect = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 析构函数</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        ~PGEntity() =&gt; _con.Close();</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 获取Sql</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="built_in">string</span> <span class="title">ToSql</span>()</span> =&gt; _sql;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 组合sqls</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="built_in">string</span> <span class="title">ComboSqls</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> sql <span class="keyword">in</span> _sqls)</span><br><span class="line">            &#123;</span><br><span class="line">                sb.Append(sql);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> sb.ToString();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> DataTable转化为实体集合</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;T&quot;&gt;</span>转换为的实体对象<span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>实体集合<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="title">List</span>&lt;<span class="title">T</span>&gt; <span class="title">ConvertDTToList</span>&lt;<span class="title">T</span>&gt;(<span class="params">DataTable dt</span>) <span class="keyword">where</span> T : <span class="keyword">new</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (dt == <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> List&lt;T&gt;();</span><br><span class="line">            <span class="keyword">var</span> type = <span class="keyword">typeof</span>(T);</span><br><span class="line">            <span class="keyword">var</span> typeAtt = <span class="keyword">typeof</span>(ColumnAttribute);</span><br><span class="line">            List&lt;T&gt; list = <span class="keyword">new</span> List&lt;T&gt;();</span><br><span class="line">            <span class="keyword">foreach</span> (DataRow row <span class="keyword">in</span> dt.Rows)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> obj = Activator.CreateInstance(type);</span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; row.Table.Columns.Count; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">var</span> column = row.Table.Columns[i];</span><br><span class="line">                    <span class="keyword">var</span> props = obj.GetType().GetProperties().Where(a =&gt; a.GetCustomAttribute&lt;ColumnAttribute&gt;() != <span class="literal">null</span>).ToList();</span><br><span class="line">                    PropertyInfo prop = props.Where(a =&gt; typeAtt.GetProperty(<span class="keyword">nameof</span>(ColumnAttribute.Name)).GetValue(a.GetCustomAttribute&lt;ColumnAttribute&gt;()).ToString() == column.ColumnName).FirstOrDefault();</span><br><span class="line">                    <span class="keyword">if</span> (prop == <span class="literal">null</span>) <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">if</span> (prop.PropertyType == <span class="keyword">typeof</span>(<span class="built_in">char</span>)) prop.SetValue(obj, row[column.ColumnName] != DBNull.Value ? (<span class="built_in">char</span>?)Convert.ToChar(row[column.ColumnName]) : <span class="literal">null</span>);</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (prop.PropertyType == <span class="keyword">typeof</span>(<span class="built_in">string</span>)) prop.SetValue(obj, row[column.ColumnName] != DBNull.Value ? Convert.ToString(row[column.ColumnName]) : <span class="literal">null</span>);</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (prop.PropertyType == <span class="keyword">typeof</span>(<span class="built_in">short</span>) || prop.PropertyType == <span class="keyword">typeof</span>(<span class="built_in">short</span>?)) prop.SetValue(obj, row[column.ColumnName] != DBNull.Value ? (<span class="built_in">short</span>?)Convert.ToInt16(row[column.ColumnName]) : <span class="literal">null</span>);</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (prop.PropertyType == <span class="keyword">typeof</span>(<span class="built_in">int</span>) || prop.PropertyType == <span class="keyword">typeof</span>(<span class="built_in">int</span>?)) prop.SetValue(obj, row[column.ColumnName] != DBNull.Value ? (<span class="built_in">int</span>?)Convert.ToInt32(row[column.ColumnName]) : <span class="literal">null</span>);</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (prop.PropertyType == <span class="keyword">typeof</span>(<span class="built_in">long</span>) || prop.PropertyType == <span class="keyword">typeof</span>(<span class="built_in">long</span>?)) prop.SetValue(obj, row[column.ColumnName] != DBNull.Value ? (<span class="built_in">long</span>?)Convert.ToInt64(row[column.ColumnName]) : <span class="literal">null</span>);</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (prop.PropertyType == <span class="keyword">typeof</span>(<span class="built_in">float</span>) || prop.PropertyType == <span class="keyword">typeof</span>(<span class="built_in">float</span>?)) prop.SetValue(obj, row[column.ColumnName] != DBNull.Value ? (<span class="built_in">float</span>?)Convert.ToSingle(row[column.ColumnName]) : <span class="literal">null</span>);</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (prop.PropertyType == <span class="keyword">typeof</span>(<span class="built_in">double</span>) || prop.PropertyType == <span class="keyword">typeof</span>(<span class="built_in">double</span>?)) prop.SetValue(obj, row[column.ColumnName] != DBNull.Value ? (<span class="built_in">double</span>?)Convert.ToDouble(row[column.ColumnName]) : <span class="literal">null</span>);</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (prop.PropertyType == <span class="keyword">typeof</span>(<span class="built_in">decimal</span>) || prop.PropertyType == <span class="keyword">typeof</span>(<span class="built_in">decimal</span>?)) prop.SetValue(obj, row[column.ColumnName] != DBNull.Value ? (<span class="built_in">decimal</span>?)Convert.ToDecimal(row[column.ColumnName]) : <span class="literal">null</span>);</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (prop.PropertyType == <span class="keyword">typeof</span>(<span class="built_in">bool</span>) || prop.PropertyType == <span class="keyword">typeof</span>(<span class="built_in">bool</span>?)) prop.SetValue(obj, row[column.ColumnName] != DBNull.Value ? (<span class="built_in">bool</span>?)Convert.ToBoolean(row[column.ColumnName]) : <span class="literal">null</span>);</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (prop.PropertyType == <span class="keyword">typeof</span>(DateTime) || prop.PropertyType == <span class="keyword">typeof</span>(DateTime?)) prop.SetValue(obj, row[column.ColumnName] != DBNull.Value ? (DateTime?)Convert.ToDateTime(row[column.ColumnName]) : <span class="literal">null</span>);</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (prop.PropertyType == <span class="keyword">typeof</span>(<span class="built_in">byte</span>) || prop.PropertyType == <span class="keyword">typeof</span>(<span class="built_in">byte</span>?)) prop.SetValue(obj, row[column.ColumnName] != DBNull.Value ? (<span class="built_in">byte</span>?)Convert.ToByte(row[column.ColumnName]) : <span class="literal">null</span>);</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (prop.PropertyType.IsEnum)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">var</span> intValue = row[column.ColumnName] != DBNull.Value ? (<span class="built_in">int</span>?)Convert.ToInt32(row[column.ColumnName]) : <span class="literal">null</span>;</span><br><span class="line">                        <span class="built_in">object</span> enumValue = Enum.ToObject(prop.PropertyType, intValue);</span><br><span class="line">                        prop.SetValue(obj, enumValue);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                list.Add((T)obj);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> list;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 获取Description特性值</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;value&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">GetDescription</span>(<span class="params">Enum <span class="keyword">value</span></span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Type enumType = <span class="keyword">value</span>.GetType();</span><br><span class="line">            <span class="built_in">string</span> name = Enum.GetName(enumType, <span class="keyword">value</span>);</span><br><span class="line">            <span class="keyword">if</span> (name != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                FieldInfo fieldInfo = enumType.GetField(name);</span><br><span class="line">                <span class="keyword">if</span> (fieldInfo != <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    DescriptionAttribute[] attrs = (DescriptionAttribute[])fieldInfo.GetCustomAttributes(<span class="keyword">typeof</span>(DescriptionAttribute), <span class="literal">false</span>);</span><br><span class="line">                    <span class="keyword">if</span> (attrs != <span class="literal">null</span> &amp;&amp; attrs.Length &gt; <span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">return</span> attrs[<span class="number">0</span>].Description;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 开启事务</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> NpgsqlTransaction <span class="title">BeginTransaction</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            NpgsqlConnection con = <span class="keyword">new</span> NpgsqlConnection(_connectionString);</span><br><span class="line">            con.Open();</span><br><span class="line">            <span class="keyword">return</span> con.BeginTransaction();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 执行Sql</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Execute</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (_sqls?.Count &lt;= <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">using</span> (NpgsqlCommand cmd = _con.CreateCommand())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (Tran != <span class="literal">null</span>)</span><br><span class="line">                    cmd.Transaction = Tran;</span><br><span class="line">                StringBuilder unitSB = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">                StringBuilder afterUnitSB = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">                <span class="keyword">foreach</span> (<span class="keyword">var</span> sql <span class="keyword">in</span> _sqls)</span><br><span class="line">                &#123;</span><br><span class="line">                    afterUnitSB.Append(sql);</span><br><span class="line">                    <span class="built_in">int</span> afterParamCount = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">foreach</span> (<span class="keyword">var</span> c <span class="keyword">in</span> afterUnitSB.ToString()) <span class="keyword">if</span> (c == <span class="string">&#x27;@&#x27;</span>) afterParamCount++;</span><br><span class="line">                    <span class="keyword">if</span> (afterParamCount &gt; <span class="number">2000</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        ExecuteSql();</span><br><span class="line">                        unitSB.Clear();</span><br><span class="line">                        afterUnitSB.Clear();</span><br><span class="line">                        unitSB.Append(sql);</span><br><span class="line">                        afterUnitSB.Append(sql);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        unitSB.Append(sql);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (unitSB.Length &gt; <span class="number">0</span>)</span><br><span class="line">                    ExecuteSql();</span><br><span class="line"></span><br><span class="line">                <span class="function"><span class="keyword">void</span> <span class="title">ExecuteSql</span>()</span></span><br><span class="line">                &#123;</span><br><span class="line">                    cmd.CommandText = unitSB.ToString();</span><br><span class="line">                    <span class="keyword">if</span> (_sqlParameters?.Count &gt; <span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        cmd.Parameters.Clear();</span><br><span class="line">                        _sqlParameters.ForEach(p =&gt; cmd.Parameters.AddWithValue(p.ParameterName, p.Value));</span><br><span class="line">                    &#125;</span><br><span class="line">                    cmd.ExecuteNonQuery();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            _sqls.Clear();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 新增</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">PGEntityInsert</span>&lt;<span class="title">T</span>&gt; <span class="title">InsertConfig</span>&lt;<span class="title">T</span>&gt;() <span class="keyword">where</span> T : <span class="keyword">new</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (_isAppendTran &amp;&amp; _runTimePGEntityInsert != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> (PGEntityInsert&lt;T&gt;)_runTimePGEntityInsert;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> pgEntity = <span class="keyword">new</span> PGEntityInsert&lt;T&gt;(_connectionString);</span><br><span class="line">                pgEntity._con = _con;</span><br><span class="line">                _runTimePGEntityInsert = pgEntity;</span><br><span class="line">                <span class="keyword">return</span> pgEntity;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 删除</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">PGEntityDelete</span>&lt;<span class="title">T</span>&gt; <span class="title">DeleteConfig</span>&lt;<span class="title">T</span>&gt;() <span class="keyword">where</span> T : <span class="keyword">new</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (_isAppendTran &amp;&amp; _runTimePGEntityDelete != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> (PGEntityDelete&lt;T&gt;)_runTimePGEntityDelete;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> pgEntity = <span class="keyword">new</span> PGEntityDelete&lt;T&gt;(_connectionString);</span><br><span class="line">                pgEntity._con = _con;</span><br><span class="line">                _runTimePGEntityDelete = pgEntity;</span><br><span class="line">                <span class="keyword">return</span> pgEntity;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 修改</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">PGEntityUpdate</span>&lt;<span class="title">T</span>&gt; <span class="title">UpdateConfig</span>&lt;<span class="title">T</span>&gt;() <span class="keyword">where</span> T : <span class="keyword">new</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (_isAppendTran &amp;&amp; _runTimePGEntityUpdate != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> (PGEntityUpdate&lt;T&gt;)_runTimePGEntityUpdate;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> pgEntity = <span class="keyword">new</span> PGEntityUpdate&lt;T&gt;(_connectionString);</span><br><span class="line">                pgEntity._con = _con;</span><br><span class="line">                _runTimePGEntityUpdate = pgEntity;</span><br><span class="line">                <span class="keyword">return</span> pgEntity;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 查询</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">PGEntitySelect</span>&lt;<span class="title">T</span>&gt; <span class="title">SelectConfig</span>&lt;<span class="title">T</span>&gt;() <span class="keyword">where</span> T : <span class="keyword">new</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (_isAppendTran &amp;&amp; _runTimePGEntitySelect != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> (PGEntitySelect&lt;T&gt;)_runTimePGEntitySelect;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> pgEntity = <span class="keyword">new</span> PGEntitySelect&lt;T&gt;(_connectionString);</span><br><span class="line">                pgEntity._con = _con;</span><br><span class="line">                _runTimePGEntitySelect = pgEntity;</span><br><span class="line">                <span class="keyword">return</span> pgEntity;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">region</span> CURD</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 新增</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PGEntityInsert</span>&lt;<span class="title">T</span>&gt; : <span class="title">PGEntity</span> <span class="keyword">where</span> <span class="title">T</span> : <span class="title">new</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> Sql参数id</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">long</span> _sqlParameterId;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">PGEntityInsert</span>(<span class="params"><span class="built_in">string</span> connectionString</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            _connectionString = connectionString;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 附加Tran</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;tran&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> PGEntityInsert&lt;T&gt; <span class="title">AppendTransaction</span>(<span class="params">NpgsqlTransaction tran</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Tran = Tran ?? tran;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 获取Sql</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">ToSql</span>()</span> =&gt; ComboSqls();</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 添加</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> PGEntityInsert&lt;T&gt; <span class="title">Insert</span>(<span class="params">List&lt;T&gt; datas</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> type = <span class="keyword">typeof</span>(T);</span><br><span class="line">            <span class="keyword">var</span> props = type.GetProperties().Where(a =&gt; (!a.GetCustomAttribute&lt;ColumnAttribute&gt;()?.IsIgnore ?? <span class="literal">false</span>) &amp;&amp; (!a.GetCustomAttribute&lt;ColumnAttribute&gt;()?.IsIdentity ?? <span class="literal">false</span>)).ToList();</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; datas.Count; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                StringBuilder tempSB = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">                <span class="keyword">var</span> data = datas[i];</span><br><span class="line">                <span class="keyword">var</span> tempInsertSQL = <span class="string">$&quot;INSERT INTO public.<span class="subst">&#123;<span class="keyword">typeof</span>(T).GetCustomAttribute&lt;TableAttribute&gt;()?.Name&#125;</span> (&quot;</span>;</span><br><span class="line">                tempSB.Append(tempInsertSQL);</span><br><span class="line">                <span class="comment">//INSERT INTO xxx (column1,...)</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; props.Count; j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">var</span> prop = props[j];</span><br><span class="line">                    <span class="keyword">var</span> columnName = prop.GetCustomAttribute&lt;ColumnAttribute&gt;()?.Name;</span><br><span class="line">                    tempSB.Append(columnName);</span><br><span class="line">                    <span class="keyword">if</span> (j &lt; props.Count - <span class="number">1</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        tempSB.Append(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        tempSB.Append(<span class="string">&quot;)&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//INSERT INTO xxx (column1,...) VALUES (value1,...);</span></span><br><span class="line">                tempSB.Append(<span class="string">&quot; VALUES (&quot;</span>);</span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; props.Count; j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">var</span> prop = props[j];</span><br><span class="line">                    <span class="keyword">var</span> columnName = prop.GetCustomAttribute&lt;ColumnAttribute&gt;()?.Name;</span><br><span class="line">                    <span class="keyword">var</span> paramName = <span class="string">$&quot;@<span class="subst">&#123;columnName&#125;</span><span class="subst">&#123;_sqlParameterId&#125;</span>&quot;</span>;</span><br><span class="line">                    tempSB.Append(paramName);</span><br><span class="line">                    <span class="keyword">if</span> (j &lt; props.Count - <span class="number">1</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        tempSB.Append(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        tempSB.Append(<span class="string">&quot;);&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">var</span> <span class="keyword">value</span> = prop.GetValue(data);</span><br><span class="line">                    _sqlParameters.Add(<span class="keyword">new</span> NpgsqlParameter(<span class="string">$&quot;<span class="subst">&#123;paramName&#125;</span>&quot;</span>, <span class="keyword">value</span> ?? DBNull.Value));</span><br><span class="line">                    _sqlParameterId++;</span><br><span class="line">                &#125;</span><br><span class="line">                _sqls.Add(tempSB.ToString());</span><br><span class="line">            &#125;</span><br><span class="line">            _sqlParameterId = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 删除</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PGEntityDelete</span>&lt;<span class="title">T</span>&gt; : <span class="title">PGEntity</span> <span class="keyword">where</span> <span class="title">T</span> : <span class="title">new</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">PGEntityDelete</span>(<span class="params"><span class="built_in">string</span> connectionString</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            _connectionString = connectionString;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 附加Tran</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;tran&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> PGEntityDelete&lt;T&gt; <span class="title">AppendTransaction</span>(<span class="params">NpgsqlTransaction tran</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Tran = Tran ?? tran;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 获取Sql</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">ToSql</span>()</span> =&gt; ComboSqls();</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> Where查询</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;predicate&quot;&gt;</span>表达式树<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>实体集合<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> PGEntityDelete&lt;T&gt; <span class="title">Where</span>(<span class="params">Expression&lt;Func&lt;T, <span class="built_in">bool</span>&gt;&gt; predicate</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            sb.Append(<span class="string">$&quot;DELETE FROM public.<span class="subst">&#123;<span class="keyword">typeof</span>(T).GetCustomAttribute&lt;TableAttribute&gt;()?.Name&#125;</span> WHERE &quot;</span>);</span><br><span class="line">            sb.Append(PGEntityExpressionVisitor&lt;T&gt;.GetWhereSql(predicate));</span><br><span class="line">            _sqls.Add(sb.ToString());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 修改</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PGEntityUpdate</span>&lt;<span class="title">T</span>&gt; : <span class="title">PGEntity</span> <span class="keyword">where</span> <span class="title">T</span> : <span class="title">new</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> Sql参数id</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">long</span> _sqlParameterId;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 更新的数据</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">private</span> List&lt;T&gt; _datas = <span class="keyword">new</span> List&lt;T&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 虚拟唯一键</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">private</span> List&lt;<span class="built_in">string</span>&gt; _uniqueKeys = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 是否是设置更新列</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">bool</span> _isSetUpdateColumn = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 更新或者忽略的列</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">private</span> List&lt;<span class="built_in">string</span>&gt; _updateOrIgnorePropertys = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">PGEntityUpdate</span>(<span class="params"><span class="built_in">string</span> connectionString</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            _connectionString = connectionString;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 附加Tran</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;tran&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> PGEntityUpdate&lt;T&gt; <span class="title">AppendTransaction</span>(<span class="params">NpgsqlTransaction tran</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Tran = Tran ?? tran;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 获取Sql</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">ToSql</span>()</span> =&gt; ComboSqls();</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 设置更新后的数据</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;datas&quot;&gt;</span>更新后的数据<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;uniqueKeys&quot;&gt;</span>数据的虚拟唯一键<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> PGEntityUpdate&lt;T&gt; <span class="title">SetUpdateDate</span>(<span class="params">List&lt;T&gt; datas, List&lt;<span class="built_in">string</span>&gt; uniqueKeys</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            _datas = datas;</span><br><span class="line">            _uniqueKeys = uniqueKeys;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 设置更新的列</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;propertyNames&quot;&gt;</span>属性名<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> PGEntityUpdate&lt;T&gt; <span class="title">SetUpdateColumns</span>(<span class="params">List&lt;<span class="built_in">string</span>&gt; propertyNames</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            _isSetUpdateColumn = <span class="literal">true</span>;</span><br><span class="line">            _updateOrIgnorePropertys.AddRange(propertyNames);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 设置忽略的列</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;propertyNames&quot;&gt;</span>属性名<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> PGEntityUpdate&lt;T&gt; <span class="title">SetIgnoreColumns</span>(<span class="params">List&lt;<span class="built_in">string</span>&gt; propertyNames</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            _isSetUpdateColumn = <span class="literal">false</span>;</span><br><span class="line">            _updateOrIgnorePropertys.AddRange(propertyNames);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 执行Sql</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Execute</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> type = <span class="keyword">typeof</span>(T);</span><br><span class="line">            <span class="keyword">var</span> allProps = type.GetProperties().Where(a =&gt; (!a.GetCustomAttribute&lt;ColumnAttribute&gt;()?.IsIgnore ?? <span class="literal">false</span>) &amp;&amp; (!a.GetCustomAttribute&lt;ColumnAttribute&gt;()?.IsIdentity ?? <span class="literal">false</span>)).ToList();</span><br><span class="line">            <span class="keyword">var</span> props = _isSetUpdateColumn ? allProps.Where(a =&gt; _updateOrIgnorePropertys.Contains(a.Name)).ToList() : allProps.Where(a =&gt; !_updateOrIgnorePropertys.Contains(a.Name)).ToList();</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; _datas.Count; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                StringBuilder tempSB = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">                <span class="keyword">var</span> data = _datas[i];</span><br><span class="line">                <span class="keyword">var</span> tempUpdateSQL = <span class="string">$&quot;UPDATE public.<span class="subst">&#123;<span class="keyword">typeof</span>(T).GetCustomAttribute&lt;TableAttribute&gt;()?.Name&#125;</span> SET &quot;</span>;</span><br><span class="line">                tempSB.Append(tempUpdateSQL);</span><br><span class="line">                <span class="comment">//UPDATE xxx SET column1 = value1, ...</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; props.Count; j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">var</span> prop = props[j];</span><br><span class="line">                    <span class="keyword">var</span> columnName = prop.GetCustomAttribute&lt;ColumnAttribute&gt;()?.Name;</span><br><span class="line">                    <span class="keyword">var</span> paramName = <span class="string">$&quot;@<span class="subst">&#123;columnName&#125;</span><span class="subst">&#123;_sqlParameterId&#125;</span>&quot;</span>;</span><br><span class="line">                    tempSB.Append(<span class="string">$&quot;<span class="subst">&#123;columnName&#125;</span> = <span class="subst">&#123;paramName&#125;</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">var</span> <span class="keyword">value</span> = prop.GetValue(data);</span><br><span class="line">                    _sqlParameters.Add(<span class="keyword">new</span> NpgsqlParameter(<span class="string">$&quot;<span class="subst">&#123;paramName&#125;</span>&quot;</span>, <span class="keyword">value</span> ?? DBNull.Value));</span><br><span class="line">                    _sqlParameterId++;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (j &lt; props.Count - <span class="number">1</span>)</span><br><span class="line">                        tempSB.Append(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//UPDATE xxx SET column1 = value1, ... WHERE ...</span></span><br><span class="line">                tempSB.Append(<span class="string">&quot; WHERE (&quot;</span>);</span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; _uniqueKeys.Count; j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">var</span> uniqueKey = _uniqueKeys[j];</span><br><span class="line">                    <span class="keyword">var</span> prop = type.GetProperty(uniqueKey);</span><br><span class="line">                    <span class="keyword">var</span> columnName = prop.GetCustomAttribute&lt;ColumnAttribute&gt;()?.Name;</span><br><span class="line">                    <span class="keyword">var</span> paramName = <span class="string">$&quot;@<span class="subst">&#123;columnName&#125;</span><span class="subst">&#123;_sqlParameterId&#125;</span>&quot;</span>;</span><br><span class="line">                    <span class="keyword">var</span> <span class="keyword">value</span> = prop.GetValue(data);</span><br><span class="line">                    paramName = <span class="keyword">value</span> == <span class="literal">null</span> ? <span class="string">&quot;IS NULL&quot;</span> : paramName;</span><br><span class="line">                    tempSB.Append(<span class="string">$&quot;<span class="subst">&#123;columnName&#125;</span> = <span class="subst">&#123;paramName&#125;</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (j &lt; _uniqueKeys.Count - <span class="number">1</span>)</span><br><span class="line">                        tempSB.Append(<span class="string">&quot; AND &quot;</span>);</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        tempSB.Append(<span class="string">&quot;);&quot;</span>);</span><br><span class="line">                    _sqlParameters.Add(<span class="keyword">new</span> NpgsqlParameter(<span class="string">$&quot;<span class="subst">&#123;paramName&#125;</span>&quot;</span>, <span class="keyword">value</span> ?? DBNull.Value));</span><br><span class="line">                    _sqlParameterId++;</span><br><span class="line">                &#125;</span><br><span class="line">                _sqls.Add(tempSB.ToString());</span><br><span class="line">            &#125;</span><br><span class="line">            _sqlParameterId = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">base</span>.Execute();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 查询</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PGEntitySelect</span>&lt;<span class="title">T</span>&gt; : <span class="title">PGEntity</span> <span class="keyword">where</span> <span class="title">T</span> : <span class="title">new</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">string</span> SELECT_SIGN = <span class="string">&quot;SELECT * FROM&quot;</span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">PGEntitySelect</span>(<span class="params"><span class="built_in">string</span> connectionString</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            _connectionString = connectionString;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> Where查询</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;predicate&quot;&gt;</span>表达式树<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>实体集合<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> PGEntitySelect&lt;T&gt; <span class="title">Where</span>(<span class="params">Expression&lt;Func&lt;T, <span class="built_in">bool</span>&gt;&gt; predicate</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            <span class="keyword">if</span> (!_sql.StartsWith(SELECT_SIGN))</span><br><span class="line">                sb.Append(<span class="string">$&quot;SELECT * FROM public.<span class="subst">&#123;<span class="keyword">typeof</span>(T).GetCustomAttribute&lt;TableAttribute&gt;()?.Name&#125;</span> WHERE &quot;</span>);</span><br><span class="line">            sb.Append(PGEntityExpressionVisitor&lt;T&gt;.GetWhereSql(predicate));</span><br><span class="line">            _sql += sb.ToString();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> WhereIf查询</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;predicate&quot;&gt;</span>表达式树<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>实体集合<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> PGEntitySelect&lt;T&gt; <span class="title">WhereIf</span>(<span class="params"><span class="built_in">bool</span> isThroughReview, Expression&lt;Func&lt;T, <span class="built_in">bool</span>&gt;&gt; predicate</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!isThroughReview) </span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            <span class="keyword">if</span> (!_sql.StartsWith(SELECT_SIGN))</span><br><span class="line">                sb.Append(<span class="string">$&quot;SELECT * FROM public.<span class="subst">&#123;<span class="keyword">typeof</span>(T).GetCustomAttribute&lt;TableAttribute&gt;()?.Name&#125;</span> WHERE &quot;</span>);</span><br><span class="line">            sb.Append(PGEntityExpressionVisitor&lt;T&gt;.GetWhereSql(predicate));</span><br><span class="line">            _sql += sb.ToString();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 获取Sql</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">ToSql</span>()</span> =&gt; _sql;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 获取数据</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">ToList</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            List&lt;T&gt; result = <span class="keyword">new</span> List&lt;T&gt;();</span><br><span class="line">            <span class="keyword">using</span> (NpgsqlCommand cmd = _con.CreateCommand())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (Tran != <span class="literal">null</span>)</span><br><span class="line">                    cmd.Transaction = Tran;</span><br><span class="line">                cmd.CommandText = <span class="built_in">string</span>.IsNullOrEmpty(_sql) ? <span class="string">$&quot;SELECT * FROM <span class="subst">&#123;<span class="keyword">typeof</span>(T).GetCustomAttribute&lt;TableAttribute&gt;()?.Name&#125;</span>&quot;</span> : _sql;</span><br><span class="line">                DataSet ds = <span class="keyword">new</span> DataSet();</span><br><span class="line">                NpgsqlDataAdapter adapter = <span class="keyword">new</span> NpgsqlDataAdapter();</span><br><span class="line">                adapter.SelectCommand = cmd;</span><br><span class="line">                adapter.Fill(ds);</span><br><span class="line">                <span class="keyword">var</span> dt = ds.Tables[<span class="number">0</span>];</span><br><span class="line">                result = ConvertDTToList&lt;T&gt;(dt);</span><br><span class="line">            &#125;</span><br><span class="line">            _sql = <span class="built_in">string</span>.Empty;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">region</span> 表达式树</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 解析Lambda表达式 =&gt; Sql语句的Where条件</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PGEntityExpressionVisitor</span>&lt;<span class="title">T</span>&gt; : <span class="title">ExpressionVisitor</span> <span class="keyword">where</span> <span class="title">T</span> : <span class="title">new</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> Where语句存储栈</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 使用先进后出原则</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">private</span> Stack&lt;<span class="built_in">string</span>&gt; _stack = <span class="keyword">new</span> Stack&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> Type _type &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 实体</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;remarks&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 存储类似下面表达式中的list数组的某一项，获取后用于传递给其他方法<span class="doctag">&lt;para&gt;</span><span class="doctag">&lt;/para&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> Test(a=&gt;list.Any(b=&gt;b.Id==a.Id));<span class="doctag">&lt;para&gt;</span><span class="doctag">&lt;/para&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/remarks&gt;</span></span></span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">object</span> _obj = <span class="keyword">new</span> <span class="built_in">object</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 获取where字符串语句</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;T&quot;&gt;</span><span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;expression&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">GetWhereSql</span>(<span class="params">Expression&lt;Func&lt;T, <span class="built_in">bool</span>&gt;&gt; expression</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            _type = <span class="keyword">typeof</span>(T);</span><br><span class="line">            PGEntityExpressionVisitor&lt;T&gt; myExpression = <span class="keyword">new</span> PGEntityExpressionVisitor&lt;T&gt;();</span><br><span class="line">            myExpression.Visit(expression);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> myExpression.StackToString();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 获取Lambda转译成的where语句</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="built_in">string</span> <span class="title">StackToString</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> result = <span class="built_in">string</span>.Concat(<span class="keyword">this</span>._stack.ToArray());<span class="comment">//把栈数据转译字符串</span></span><br><span class="line">            <span class="keyword">this</span>._stack.Clear();<span class="comment">//清空栈</span></span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 解析二元表达式</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;node&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> Expression <span class="title">VisitBinary</span>(<span class="params">BinaryExpression node</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (node == <span class="literal">null</span>)<span class="comment">//如果解析的节点是空，抛出异常</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="keyword">nameof</span>(node) + <span class="string">&quot;: 为空!&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>._stack.Push(<span class="string">&quot;)&quot;</span>);<span class="comment">//添加where语句最右侧的括号</span></span><br><span class="line">            <span class="keyword">base</span>.Visit(node.Right);<span class="comment">//解析右边</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//解析拼接条件 例: And、Or、Not、&gt;、&lt;、&gt;=、&lt;=、=</span></span><br><span class="line">            <span class="keyword">this</span>._stack.Push(<span class="string">$&quot; <span class="subst">&#123;GetYymbol(node.NodeType)&#125;</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">base</span>.Visit(node.Left);<span class="comment">//解析左边</span></span><br><span class="line">            <span class="keyword">this</span>._stack.Push(<span class="string">&quot;(&quot;</span>);<span class="comment">//添加where语句最左侧括号</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 获取简单条件拼接符号</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;expType&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">GetYymbol</span>(<span class="params">ExpressionType expType</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">switch</span> (expType)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> (ExpressionType.AndAlso):</span><br><span class="line">                <span class="keyword">case</span> (ExpressionType.And):</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;AND&quot;</span>;</span><br><span class="line">                <span class="keyword">case</span> (ExpressionType.OrElse):</span><br><span class="line">                <span class="keyword">case</span> (ExpressionType.Or):</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;OR&quot;</span>;</span><br><span class="line">                <span class="keyword">case</span> (ExpressionType.Not):</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;NOT&quot;</span>;</span><br><span class="line">                <span class="keyword">case</span> (ExpressionType.NotEqual):</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;&lt;&gt;&quot;</span>;</span><br><span class="line">                <span class="keyword">case</span> ExpressionType.GreaterThan:</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;&gt;&quot;</span>;</span><br><span class="line">                <span class="keyword">case</span> ExpressionType.GreaterThanOrEqual:</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;&gt;=&quot;</span>;</span><br><span class="line">                <span class="keyword">case</span> ExpressionType.LessThan:</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;&lt;&quot;</span>;</span><br><span class="line">                <span class="keyword">case</span> ExpressionType.LessThanOrEqual:</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;&lt;=&quot;</span>;</span><br><span class="line">                <span class="keyword">case</span> (ExpressionType.Equal):</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;=&quot;</span>;</span><br><span class="line">                <span class="literal">default</span>:</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;Lanbda存在不识别的符号:&quot;</span> + expType.ToString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 重写解析方法</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 获取复杂条件拼接字符串</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;node&quot;&gt;</span>方法，例:x.Name.Contains(&quot;abc&quot;)，x.Number.IsNullOrEmpty()......<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;exception cref=&quot;ArgumentNullException&quot;&gt;</span><span class="doctag">&lt;/exception&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> Expression <span class="title">VisitMethodCall</span>(<span class="params">MethodCallExpression node</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (node == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="keyword">nameof</span>(node) + <span class="string">&quot;: 为空!&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">switch</span> (node.Method.Name)</span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;StartsWith&quot;</span>:</span><br><span class="line">                    LikeMethod(<span class="string">&quot;(&#123;0&#125; LIKE &#x27;&#123;1&#125;%&#x27;)&quot;</span>, node);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;Contains&quot;</span>:</span><br><span class="line">                    LikeMethod(<span class="string">&quot;(&#123;0&#125; LIKE &#x27;%&#123;1&#125;%&#x27;)&quot;</span>, node);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;EndsWith&quot;</span>:</span><br><span class="line">                    LikeMethod(<span class="string">&quot;(&#123;0&#125; LIKE &#x27;%&#123;1&#125;&#x27;)&quot;</span>, node);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;IsNullOrEmpty&quot;</span>:</span><br><span class="line">                    LikeMethod(<span class="string">&quot;(&#123;0&#125; IS NUll)&quot;</span>, node);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;Any&quot;</span>:</span><br><span class="line">                    &#123;</span><br><span class="line">                        Type[] genericArguments = node.Method.GetGenericArguments();</span><br><span class="line">                        <span class="keyword">var</span> obj = Expression.Lambda(node.Arguments[<span class="number">0</span>]).Compile().DynamicInvoke();</span><br><span class="line">                        IEnumerable enumerable = obj <span class="keyword">as</span> IEnumerable;</span><br><span class="line">                        ReplaceParameterVisitor replaceParameterVisitor = <span class="keyword">new</span> ReplaceParameterVisitor();</span><br><span class="line">                        <span class="built_in">bool</span> isFirst = <span class="literal">true</span>;</span><br><span class="line">                        <span class="keyword">foreach</span> (<span class="built_in">object</span> item <span class="keyword">in</span> enumerable)</span><br><span class="line">                        &#123;</span><br><span class="line">                            _obj = item;</span><br><span class="line">                            Expression exp2 = replaceParameterVisitor.Modify(node.Arguments[<span class="number">1</span>] <span class="keyword">as</span> LambdaExpression, Expression.Constant(item, genericArguments[<span class="number">0</span>]));</span><br><span class="line">                            <span class="keyword">if</span> (!isFirst)</span><br><span class="line">                                <span class="keyword">this</span>._stack.Push(<span class="string">$&quot; OR &quot;</span>);</span><br><span class="line">                            <span class="keyword">this</span>.Visit(exp2);</span><br><span class="line">                            isFirst = <span class="literal">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;All&quot;</span>:</span><br><span class="line">                    &#123;</span><br><span class="line">                        Type[] genericArguments = node.Method.GetGenericArguments();</span><br><span class="line">                        <span class="keyword">var</span> obj = Expression.Lambda(node.Arguments[<span class="number">0</span>]).Compile().DynamicInvoke();</span><br><span class="line">                        IEnumerable enumerable = obj <span class="keyword">as</span> IEnumerable;</span><br><span class="line">                        ReplaceParameterVisitor replaceParameterVisitor = <span class="keyword">new</span> ReplaceParameterVisitor();</span><br><span class="line">                        <span class="built_in">bool</span> isFirst = <span class="literal">true</span>;</span><br><span class="line">                        <span class="keyword">foreach</span> (<span class="built_in">object</span> item <span class="keyword">in</span> enumerable)</span><br><span class="line">                        &#123;</span><br><span class="line">                            _obj = item;</span><br><span class="line">                            Expression exp2 = replaceParameterVisitor.Modify(node.Arguments[<span class="number">1</span>] <span class="keyword">as</span> LambdaExpression, Expression.Constant(item, genericArguments[<span class="number">0</span>]));</span><br><span class="line">                            <span class="keyword">if</span> (!isFirst)</span><br><span class="line">                                <span class="keyword">this</span>._stack.Push(<span class="string">$&quot; AND &quot;</span>);</span><br><span class="line">                            <span class="keyword">this</span>.Visit(exp2);</span><br><span class="line">                            isFirst = <span class="literal">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="literal">default</span>:</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> NotSupportedException(<span class="string">&quot;存在不识别方法: &quot;</span> + node.NodeType);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> Like方法</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;likeSQL&quot;&gt;</span>likeSQL语句<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;node&quot;&gt;</span>表达式树节点<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">LikeMethod</span>(<span class="params"><span class="built_in">string</span> likeSQL, MethodCallExpression node</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//解析属性 例: x.Name</span></span><br><span class="line">            <span class="keyword">this</span>.Visit(node.Object);</span><br><span class="line">            <span class="comment">//解析方法中的参数, 例: Contains(&quot;abc&quot;)中的 abc</span></span><br><span class="line">            <span class="keyword">this</span>.Visit(node.Arguments[<span class="number">0</span>]);</span><br><span class="line">            <span class="built_in">string</span> right = <span class="keyword">this</span>._stack.Pop();<span class="comment">//在栈中剪切出来一个右侧  abc</span></span><br><span class="line">            <span class="built_in">string</span> left = <span class="keyword">this</span>._stack.Pop(); <span class="comment">//在栈中剪切出来一个左侧  name</span></span><br><span class="line">            <span class="comment">//重新拼接，存储到栈中</span></span><br><span class="line">            <span class="keyword">this</span>._stack.Push(<span class="built_in">string</span>.Format(likeSQL, left, right));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 重写解析属性 例: x =&gt; x.Id 中的 Id</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 向where语句存储栈中添加解析成功的属性 例如: Id</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;node&quot;&gt;</span>属性,例: x.Id<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> Expression <span class="title">VisitMember</span>(<span class="params">MemberExpression node</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (node == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="keyword">nameof</span>(node) + <span class="string">&quot;: 为空!&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (node.Expression.ToString().StartsWith(<span class="string">&quot;value(&quot;</span>))<span class="comment">//代表这是一个DTO，可能是list也可能是单个实体，总之这样写代表了表达式树出现了类似Test(a=&gt;list.Any(b=&gt;b.Id==a.Id));中这样的情况</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> str = node.Expression.ToString().Replace(<span class="string">&quot;value(&quot;</span>, <span class="built_in">string</span>.Empty).Replace(<span class="string">&quot;)&quot;</span>, <span class="built_in">string</span>.Empty);</span><br><span class="line">                <span class="keyword">var</span> type = Type.GetType(str);</span><br><span class="line">                <span class="keyword">var</span> <span class="keyword">value</span> = type.GetProperty(node.Member.Name).GetValue(_obj);</span><br><span class="line">                <span class="keyword">this</span>._stack.Push(<span class="string">$&quot;&#x27;<span class="subst">&#123;<span class="keyword">value</span>&#125;</span>&#x27;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> prop = _type.GetProperty(node.Member.Name);</span><br><span class="line">                <span class="keyword">var</span> att = prop.GetCustomAttribute&lt;ColumnAttribute&gt;();</span><br><span class="line">                <span class="keyword">if</span> (att != <span class="literal">null</span> &amp;&amp; (!att?.IsIgnore ?? <span class="literal">false</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">this</span>._stack.Push(att.Name);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 重写解析常量 例如: 1</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;node&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;exception cref=&quot;ArgumentNullException&quot;&gt;</span><span class="doctag">&lt;/exception&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> Expression <span class="title">VisitConstant</span>(<span class="params">ConstantExpression node</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (node == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="keyword">nameof</span>(node) + <span class="string">&quot;: 为空!&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>._stack.Push(<span class="string">$&quot;&#x27;<span class="subst">&#123;node.Value&#125;</span>&#x27;&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 参数替换递归器</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ReplaceParameterVisitor</span> : <span class="title">ExpressionVisitor</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> Expression _replaceExp;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> ParameterExpression oldParameter;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 修改表达式</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;lambda&quot;&gt;</span>lambda表达式<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;replaceExp&quot;&gt;</span>表达式树<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Expression <span class="title">Modify</span>(<span class="params">LambdaExpression lambda, Expression replaceExp</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            _replaceExp = replaceExp;</span><br><span class="line">            oldParameter = lambda.Parameters.FirstOrDefault();</span><br><span class="line">            <span class="keyword">return</span> Visit(lambda.Body);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> Expression <span class="title">VisitMember</span>(<span class="params">MemberExpression node</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Expression expression = node.Expression;</span><br><span class="line">            <span class="keyword">if</span> (expression != <span class="literal">null</span> &amp;&amp; expression.NodeType == ExpressionType.Parameter &amp;&amp; node.Expression == oldParameter)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> Expression.Property(_replaceExp, node.Member.Name);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">base</span>.VisitMember(node);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> Expression <span class="title">VisitParameter</span>(<span class="params">ParameterExpression node</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (node == oldParameter)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> _replaceExp;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">base</span>.VisitParameter(node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">region</span> 特性</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 表</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    [<span class="meta">AttributeUsage(AttributeTargets.Class)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TableAttribute</span> : <span class="title">Attribute</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 表名</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 列</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    [<span class="meta">AttributeUsage(AttributeTargets.Property)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ColumnAttribute</span> : <span class="title">Attribute</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 列名</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 是否为主键</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">bool</span> IsPrimary &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 是否忽略该列</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">bool</span> IsIgnore &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 是否为自增Id</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">bool</span> IsIdentity &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">region</span> 构造器</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> PGEntity构造器</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PGEntityBuilder</span> : <span class="title">PGEntity</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 设置连接字符串</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;value&quot;&gt;</span>连接字符串<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>PGEntityBuilder<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> PGEntityBuilder <span class="title">SetConnectionString</span>(<span class="params"><span class="built_in">string</span> <span class="keyword">value</span></span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            _connectionString = _connectionString ?? <span class="keyword">value</span>;</span><br><span class="line">            _con = _con ?? <span class="keyword">new</span> NpgsqlConnection(_connectionString);</span><br><span class="line">            _con.Open();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 构造PGEntity</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>PGEntity<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> PGEntity <span class="title">Build</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>计算机</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>C#FPSpread基础配置</title>
    <url>/2024/03/14/C-FPSpread%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[]]></content>
  </entry>
</search>
